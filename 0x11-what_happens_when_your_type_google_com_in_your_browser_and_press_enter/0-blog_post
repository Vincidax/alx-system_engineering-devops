What happens when you type google.com in your browser and press Enter

Using internet has become an essential tool for many of us on a daily basis but few understand the process necessary to get response when you type https://www.google.com in your browser and press Enter, several things happen behind the scenes to get you to the Google search page. Let's dive into the intricate journey your request embarks upon, traversing through various layers of internet infrastructure.
    1. DNS request: Your browser tries to resolve the hostname www.google.com into an IP address. To do this, your computer makes a DNS request for www.google.com. This request is sent to the IP address of the domain servers configured on your computer. For example purposes, let’s say we use one of Google’s name servers, 8.8.8.8. The request is sent out to 8.8.8.8 on UDP port 53 (the default DNS port). The UDP header includes information about where to send return packets, such as an IP address which for your home computer we’ll call 192.168.0.5. You have a router at home that probably has some kind of internal firewall for routing these packets. That firewall checks if you’re allowed to send the packets, and generally outbound traffic is not filtered on home routers. After that, you have to deal with Network Address Translation (NAT). Since there are multiple computers on your home network with their own private (internal to your home network), but only one public IP address (the one that the internet sees), if all the home network computers request a DNS response that is returned to port 53, the router won’t know which computer to send it to. So instead, these client requests are mapped to quasi-random high numbered ports for each computer. The router will rewrite the packet header with the public IP and the mapped port (let’s say it is 147.47.47.47 port 10000), listen for a response on those ports, and when it gets one will forward that packet back to the computer that originally requested the packet that caused the router to listen on that port. This request travels through your local DNS cache, ISP's DNS servers, and might traverse several other servers until it finds the IP address associated with “www.google.com.
    2. TCP/IP: your browser uses the Transmission Control Protocol (TCP) to establish a connection with the server using a specific port. Internet Protocol (IP) determines the route and addressing to ensure the packets reach the intended destination.Once the IP address is resolved, your browser establishes a TCP/IP connection with the server at that IP address. Once the connection is established, your browser sends an HTTP request to the server.
    3. Firewall: At this stage, the connection might encounter a firewall—a security measure that filters incoming and outgoing network traffic based on predetermined security rules. It ensures the safety and integrity of the network by monitoring and controlling incoming and outgoing traffic.The server’s firewall checks if you’re allowed to access the requested resource. If you’re not, the server sends back an HTTP error code (e.g., 403 Forbidden).
    4. HTTPS/SSL: If the requested resource is protected by HTTPS/SSL, your browser and the server engage in a TLS handshake to establish a secure connection. This involves exchanging certificates, verifying their authenticity, and agreeing on a shared encryption key.
    5. Load-balancer: In the case of large websites like Google, a load-balancer often sits between the client and the server. It distributes incoming network traffic across multiple servers to optimize resource utilization, enhance performance, and prevent overload on any single server.
    6. Web server: The server receives the HTTP request from your browser and processes it. If the request is for a static resource (e.g., an image or a CSS file), the server retrieves the resource from disk and sends it back to your browser. If the request is for a dynamic resource (e.g., a search result page), the server passes the request to an application server.
    7. Application server: The application server processes the request and generates a response. This may involve querying a database, running business logic, or invoking other services. Once the response is generated, the application server sends it back to the web server.
    8. Database: If the application server needs to retrieve data from a database, it sends a query to the database server. The database server processes the query and sends back the requested data.

Finally, the gathered information is packaged into a response, encrypted, and sent back through the same path it traveled, passing through various systems before reaching your browser, which then interprets the received data and displays the Google search page or whatever content was requested. 
The journey from typing a URL to seeing a webpage involves a complex symphony of systems working seamlessly together to deliver the content you seek—a testament to the marvels of modern internet infrastructure!
